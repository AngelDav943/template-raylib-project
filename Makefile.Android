#**************************************************************************************************
#
#   raylib makefile for Android project (APK building)
#
#   Copyright (c) 2017 Ramon Santamaria (@raysan5)
#
#   This software is provided "as-is", without any express or implied warranty. In no event
#   will the authors be held liable for any damages arising from the use of this software.
#
#   Permission is granted to anyone to use this software for any purpose, including commercial
#   applications, and to alter it and redistribute it freely, subject to the following restrictions:
#
#     1. The origin of this software must not be misrepresented; you must not claim that you
#     wrote the original software. If you use this software in a product, an acknowledgment
#     in the product documentation would be appreciated but is not required.
#
#     2. Altered source versions must be plainly marked as such, and must not be misrepresented
#     as being the original software.
#
#     3. This notice may not be removed or altered from any source distribution.
#
#**************************************************************************************************

# Define required raylib variables
PLATFORM               ?= PLATFORM_ANDROID
RAYLIB_PATH        	   ?= C:/raylib/raylib

# Define Android architecture (armeabi-v7a, arm64-v8a, x86, x86-64) and API version
ANDROID_ARCH           ?= ARM64
ANDROID_API_VERSION     = 33
ifeq ($(ANDROID_ARCH),ARM)
    ANDROID_ARCH_NAME   = armeabi-v7a
endif
ifeq ($(ANDROID_ARCH),ARM64)
    ANDROID_ARCH_NAME   = arm64-v8a
endif

# Required path variables

# old ANDROID_TOOLCHAIN = C:/android_toolchain_$(ANDROID_ARCH)_API$(ANDROID_API_VERSION)
JAVA_HOME              ?= D:/Program Files/Java/jdk-15
ANDROID_HOME            = C:/android-sdk
ANDROID_TOOLCHAIN       = C:/android-ndk/toolchains/llvm/prebuilt/windows-x86_64
ANDROID_BUILD_TOOLS     = $(ANDROID_HOME)/build-tools/34.0.0
ANDROID_PLATFORM_TOOLS  = $(ANDROID_HOME)/platform-tools

# Android project configuration variables
PROJECT_NAME           ?= angelgame
PROJECT_LIBRARY_NAME   ?= main
PROJECT_BUILD_PATH     ?= android.$(PROJECT_NAME)
PROJECT_RESOURCES_PATH ?= resources
PROJECT_SOURCE_FILES   ?= src/main.cpp

# Required directories
PROJECT_SOURCE_DIRS = $(sort $(dir $(PROJECT_SOURCE_FILES)))

# Android app configuration variables
APP_LABEL_NAME ?= testGame
APP_COMPANY_NAME ?= angel
APP_PRODUCT_NAME ?= rgame
APP_VERSION_CODE ?= 1
APP_VERSION_NAME ?= 1.0
APP_ICON_LDPI ?= $(RAYLIB_PATH)\logo\raylib_36x36.png
APP_ICON_MDPI ?= $(RAYLIB_PATH)\logo\raylib_48x48.png
APP_ICON_HDPI ?= $(RAYLIB_PATH)\logo\raylib_72x72.png
APP_SCREEN_ORIENTATION ?= landscape
APP_KEYSTORE_PASS ?= angeltestraylibproject

# Library type used for raylib: STATIC (.a) or SHARED (.so/.dll)
RAYLIB_LIBTYPE ?= SHARED

# Library path for libraylib.a/libraylib.so
RAYLIB_LIB_PATH = $(RAYLIB_PATH)\src

# Shared libs must be added to APK if required
ifeq ($(RAYLIB_LIBTYPE),SHARED)
    PROJECT_SHARED_LIBS = lib/$(ANDROID_ARCH_NAME)/libraylib.so
    PROJECT_SHARED_LIBS += lib/$(ANDROID_ARCH_NAME)/libc++_shared.so
    PROJECT_SHARED_LIBS += lib/$(ANDROID_ARCH_NAME)/libraylib.500.so
endif

# Compiler and archiver
# old CC compiler = $(ANDROID_TOOLCHAIN)/bin/arm-linux-androideabi-clang++
ifeq ($(ANDROID_ARCH),ARM)
	CC = $(ANDROID_TOOLCHAIN)/bin/armv7a-linux-androideabi33-clang++
    AR = $(ANDROID_TOOLCHAIN)/bin/arm-linux-androideabi-ar
endif
ifeq ($(ANDROID_ARCH),ARM64)
    CC = $(ANDROID_TOOLCHAIN)/bin/aarch64-linux-android${ANDROID_API_VERSION}-clang++
    AR = $(ANDROID_TOOLCHAIN)/bin/aarch64-linux-android-ar
endif

# Compiler flags for architecture
ifeq ($(ANDROID_ARCH),ARM)
    CFLAGS = -std=c++11 -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16
endif
ifeq ($(ANDROID_ARCH),ARM64)
    CFLAGS = -std=c++11 -target aarch64 -mfix-cortex-a53-835769
endif
CFLAGS += -ffunction-sections -funwind-tables -fstack-protector-strong -fPIC
CFLAGS += -Wall -Wa,--noexecstack -Wformat -Werror=format-security -no-canonical-prefixes
CFLAGS += -DANDROID -DPLATFORM_ANDROID -D__ANDROID_API__=$(ANDROID_API_VERSION)

# Paths containing required header files
INCLUDE_PATHS = -I. -I$(RAYLIB_PATH)/src -I C:\android-ndk\sources\android\native_app_glue

# Linker options
LDFLAGS = -Wl,-soname,lib$(PROJECT_LIBRARY_NAME).so -Wl,--exclude-libs,libatomic.a
LDFLAGS += -Wl,--build-id -Wl,--no-undefined -Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now -Wl,--warn-shared-textrel -Wl,--fatal-warnings
LDFLAGS += -u ANativeActivity_onCreate
LDFLAGS += -L. -L$(PROJECT_BUILD_PATH)/obj -L$(PROJECT_BUILD_PATH)/lib/$(ANDROID_ARCH_NAME) -L$(ANDROID_TOOLCHAIN)/sysroot/usr/lib
LDFLAGS += -fPIC
LDFLAGS += -v

# Define any libraries to link into executable
LDLIBS = -lm -lc++ -lraylib -llog -landroid -lEGL -lGLESv2 -lOpenSLES -ldl

# Generate target objects list from PROJECT_SOURCE_FILES
OBJS = $(patsubst %.cpp, $(PROJECT_BUILD_PATH)/obj/%.o, $(PROJECT_SOURCE_FILES))

# Android APK building process
all: create_temp_project_dirs \
     copy_project_required_libs \
	 generate_res_icons \
     copy_project_resources \
     generate_loader_script \
     generate_android_manifest \
     generate_apk_keystore \
     config_project_package \
     compile_project_code \
     compile_project_class \
     compile_project_class_dex \
     create_project_apk_package \
     sign_project_apk_package \
     zipalign_project_apk_package \
	 install \
	 start \
	 clean

# Create required temp directories for APK building
create_temp_project_dirs:
	if not exist $(PROJECT_BUILD_PATH) mkdir $(PROJECT_BUILD_PATH)
	if not exist $(PROJECT_BUILD_PATH)\obj mkdir $(PROJECT_BUILD_PATH)\obj
	if not exist $(PROJECT_BUILD_PATH)\src mkdir $(PROJECT_BUILD_PATH)\src
	if not exist $(PROJECT_BUILD_PATH)\src\com mkdir $(PROJECT_BUILD_PATH)\src\com
	if not exist $(PROJECT_BUILD_PATH)\src\com\$(APP_COMPANY_NAME) mkdir $(PROJECT_BUILD_PATH)\src\com\$(APP_COMPANY_NAME)
	if not exist $(PROJECT_BUILD_PATH)\src\com\$(APP_COMPANY_NAME)\$(APP_PRODUCT_NAME) mkdir $(PROJECT_BUILD_PATH)\src\com\$(APP_COMPANY_NAME)\$(APP_PRODUCT_NAME)
	if not exist $(PROJECT_BUILD_PATH)\lib mkdir $(PROJECT_BUILD_PATH)\lib
	if not exist $(PROJECT_BUILD_PATH)\lib\$(ANDROID_ARCH_NAME) mkdir $(PROJECT_BUILD_PATH)\lib\$(ANDROID_ARCH_NAME)
	if not exist $(PROJECT_BUILD_PATH)\bin mkdir $(PROJECT_BUILD_PATH)\bin
	if not exist $(PROJECT_BUILD_PATH)\res mkdir $(PROJECT_BUILD_PATH)\res
	if not exist $(PROJECT_BUILD_PATH)\res\drawable-ldpi mkdir $(PROJECT_BUILD_PATH)\res\drawable-ldpi
	if not exist $(PROJECT_BUILD_PATH)\res\drawable-mdpi mkdir $(PROJECT_BUILD_PATH)\res\drawable-mdpi
	if not exist $(PROJECT_BUILD_PATH)\res\drawable-hdpi mkdir $(PROJECT_BUILD_PATH)\res\drawable-hdpi
	if not exist $(PROJECT_BUILD_PATH)\res\values mkdir $(PROJECT_BUILD_PATH)\res\values
	if not exist $(PROJECT_BUILD_PATH)\assets mkdir $(PROJECT_BUILD_PATH)\assets
	if not exist $(PROJECT_BUILD_PATH)\assets\$(PROJECT_RESOURCES_PATH) mkdir $(PROJECT_BUILD_PATH)\assets\$(PROJECT_RESOURCES_PATH)
	if not exist $(PROJECT_BUILD_PATH)\obj\screens mkdir $(PROJECT_BUILD_PATH)\obj\screens
	$(foreach dir, $(PROJECT_SOURCE_DIRS), $(call create_dir, $(dir)))

define create_dir
    if not exist $(PROJECT_BUILD_PATH)\obj\$(1) mkdir $(PROJECT_BUILD_PATH)\obj\$(1)
endef

# Copy required shared libs for integration into APK
copy_project_required_libs:
ifeq ($(RAYLIB_LIBTYPE),SHARED)
	copy /Y "$(RAYLIB_LIB_PATH)\libraylib.so" "$(PROJECT_BUILD_PATH)\lib\$(ANDROID_ARCH_NAME)\libraylib.so"
	copy /Y "$(RAYLIB_LIB_PATH)\libraylib.so" "$(PROJECT_BUILD_PATH)\lib\$(ANDROID_ARCH_NAME)\libraylib.500.so"
endif
ifeq ($(RAYLIB_LIBTYPE),STATIC)
	copy /Y "$(RAYLIB_LIB_PATH)\libraylib.a" "$(PROJECT_BUILD_PATH)\lib\$(ANDROID_ARCH_NAME)\libraylib.a"
endif
# Ensure libc++_shared.so is copied to the APK
ifeq ($(ANDROID_ARCH),ARM)
	copy /Y "$(ANDROID_TOOLCHAIN)\sysroot\usr\lib\arm-linux-androideabi\libc++_shared.so" "$(PROJECT_BUILD_PATH)\lib\$(ANDROID_ARCH_NAME)\libc++_shared.so"
endif
ifeq ($(ANDROID_ARCH),ARM64)
	copy /Y "$(ANDROID_TOOLCHAIN)\sysroot\usr\lib\aarch64-linux-android\libc++_shared.so" "$(PROJECT_BUILD_PATH)\lib\$(ANDROID_ARCH_NAME)\libc++_shared.so"
endif

# Generate res images (icons)
generate_res_icons:
	cd resources\icons && cmd /c android_icons_generator.bat
	if exist $(PROJECT_BUILD_PATH) xcopy resources\res "$(PROJECT_BUILD_PATH)\res" /s /i /y
	rmdir "resources/res" /s /q

# Copy project required resources: strings.xml, icon.png, assets
copy_project_resources:
	@echo ^<?xml version="1.0" encoding="utf-8"?^> > $(PROJECT_BUILD_PATH)\res\values\strings.xml
	@echo ^<resources^> >> $(PROJECT_BUILD_PATH)\res\values\strings.xml
	@echo ^<string name="app_name"^>$(APP_LABEL_NAME)^</string^> >> "$(PROJECT_BUILD_PATH)\res\values\strings.xml"
	@echo ^</resources^> >> $(PROJECT_BUILD_PATH)\res\values\strings.xml
# Copying all assets
	if exist assets xcopy assets "$(PROJECT_BUILD_PATH)\assets" /s /i /y

# Check if NativeLoader.java exists
NATIVE_LOADER_EXISTS := $(wildcard $(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java)

# Generate loader script for Java
generate_loader_script:
ifeq ($(NATIVE_LOADER_EXISTS),)
	@echo package com.$(APP_COMPANY_NAME).$(APP_PRODUCT_NAME); > "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo. >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo import android.app.NativeActivity; >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo import android.util.Log; >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo. >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo public class NativeLoader extends NativeActivity { >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo     static { >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo 	      try { >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo             System.loadLibrary("$(PROJECT_LIBRARY_NAME)"); >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo             System.loadLibrary("raylib"); >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo 	          Log.d("NativeLoader", "Native libraries loaded successfully."); >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo 	      } catch (UnsatisfiedLinkError e) { >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo 	          Log.e("NativeLoader", "Error loading native libraries: " + e.getMessage()); >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo         } >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo 	  } >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
	@echo } >> "$(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java"
else
	@echo "NativeLoader.java already exists, skipping generation"
endif


# Check if a AndroidManifest.xml exists on the project folder to copy
NATIVE_LOADER_EXISTS := $(wildcard AndroidManifest.xml)

# Generate AndroidManifest.xml with all the required options
# NOTE: Probably not the bet way to generate this file... but it works.
generate_android_manifest:
ifeq ($(NATIVE_LOADER_EXISTS),)
	@echo "Generating a new AndroidManifest.xml"

	@echo ^<?xml version="1.0" encoding="utf-8"^?^> > $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo ^<manifest xmlns:android="http://schemas.android.com/apk/res/android" >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo         package="com.$(APP_COMPANY_NAME).$(APP_PRODUCT_NAME)"  >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo         android:versionCode="$(APP_VERSION_CODE)" android:versionName="$(APP_VERSION_NAME)" ^> >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo     ^<uses-sdk android:minSdkVersion="$(ANDROID_API_VERSION)" /^> >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo     ^<uses-feature android:glEsVersion="0x00020000" android:required="true" /^> >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo     ^<application android:allowBackup="false" android:label="@string/app_name" android:icon="@drawable/icon" ^> >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo         ^<activity android:name="com.$(APP_COMPANY_NAME).$(APP_PRODUCT_NAME).NativeLoader" >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo             android:theme="@android:style/Theme.NoTitleBar.Fullscreen" >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo             android:configChanges="orientation|keyboardHidden|screenSize" >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo             android:exported="true" >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo             android:screenOrientation="$(APP_SCREEN_ORIENTATION)" android:launchMode="singleTask" >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo             android:clearTaskOnLaunch="true"^> >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo             ^<meta-data android:name="android.app.lib_name" android:value="$(PROJECT_LIBRARY_NAME)" /^> >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo             ^<intent-filter^> >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo                 ^<action android:name="android.intent.action.MAIN" /^> >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo                 ^<category android:name="android.intent.category.LAUNCHER" /^> >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo             ^</intent-filter^> >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo         ^</activity^> >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo     ^</application^> >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
	@echo ^</manifest^> >> $(PROJECT_BUILD_PATH)/AndroidManifest.xml
else
	@echo "Using existing AndroidManifest.xml"
	copy /Y "AndroidManifest.xml" "$(PROJECT_BUILD_PATH)/AndroidManifest.xml"
endif

# Generate storekey for APK signing: $(PROJECT_NAME).keystore
# NOTE: Configure here your Distinguished Names (-dname) if required!
generate_apk_keystore:
	if not exist "$(PROJECT_BUILD_PATH)/$(PROJECT_NAME).keystore" "$(JAVA_HOME)/bin/keytool" \
		-genkeypair -v -validity 1000 \
		-dname "CN=$(APP_COMPANY_NAME),O=Android,C=ES" \
		-keystore "$(PROJECT_BUILD_PATH)/$(PROJECT_NAME).keystore" \
		-storepass $(APP_KEYSTORE_PASS) \
		-keypass $(APP_KEYSTORE_PASS) \
		-alias $(PROJECT_NAME)Key \
		-keyalg RSA \
		-sigalg SHA256withRSA

# Configure project packaging
config_project_package:
	$(ANDROID_BUILD_TOOLS)/aapt package -f -m -S $(PROJECT_BUILD_PATH)/res -J $(PROJECT_BUILD_PATH)/src -M $(PROJECT_BUILD_PATH)/AndroidManifest.xml -I $(ANDROID_HOME)/platforms/android-$(ANDROID_API_VERSION)/android.jar

# Compile project code into a shared library: lib/lib$(PROJECT_LIBRARY_NAME).so
compile_project_code: $(OBJS)
	$(CC) -o "$(PROJECT_BUILD_PATH)/lib/$(ANDROID_ARCH_NAME)/lib$(PROJECT_LIBRARY_NAME).so" $(OBJS) -shared $(INCLUDE_PATHS) $(LDFLAGS) $(LDLIBS)

# Compile all .c files required into object (.o) files
# NOTE: Those files will be linked into a shared library
$(PROJECT_BUILD_PATH)/obj/%.o:%.c
	$(CC) -c $^ -o $@ $(INCLUDE_PATHS) $(CFLAGS) --sysroot=$(ANDROID_TOOLCHAIN)/sysroot

# Compile project class
compile_project_class:
	"$(JAVA_HOME)/bin/javac" -verbose -source 15 -target 15 -d $(PROJECT_BUILD_PATH)/obj -classpath $(ANDROID_HOME)/platforms/android-$(ANDROID_API_VERSION)/android.jar;$(PROJECT_BUILD_PATH)/obj -sourcepath $(PROJECT_BUILD_PATH)/src $(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/R.java $(PROJECT_BUILD_PATH)/src/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/NativeLoader.java

# Compile .class files into Dalvik executable bytecode (.dex)
# NOTE: Since Android 5.0, Dalvik interpreter (JIT) has been replaced by ART (AOT)
compile_project_class_dex:
	"$(ANDROID_BUILD_TOOLS)/d8" --output "$(PROJECT_BUILD_PATH)/bin/" --classpath "$(ANDROID_HOME)/platforms/android-$(ANDROID_API_VERSION)/android.jar" $(PROJECT_BUILD_PATH)/obj/com/$(APP_COMPANY_NAME)/$(APP_PRODUCT_NAME)/*.class

# Create Android APK package: bin/$(PROJECT_NAME).unsigned.apk
# NOTE: Requires compiled classes.dex and lib$(PROJECT_LIBRARY_NAME).so
# NOTE: Use -A resources to define additional directory in which to find raw asset files
create_project_apk_package:
	$(ANDROID_BUILD_TOOLS)/aapt package -f -M $(PROJECT_BUILD_PATH)/AndroidManifest.xml -S $(PROJECT_BUILD_PATH)/res -A $(PROJECT_BUILD_PATH)/assets -I $(ANDROID_HOME)/platforms/android-$(ANDROID_API_VERSION)/android.jar -F $(PROJECT_BUILD_PATH)/bin/$(PROJECT_NAME).unsigned.apk -v
	cd $(PROJECT_BUILD_PATH) && $(ANDROID_BUILD_TOOLS)/aapt add bin/$(PROJECT_NAME).unsigned.apk lib/$(ANDROID_ARCH_NAME)/lib$(PROJECT_LIBRARY_NAME).so $(PROJECT_SHARED_LIBS)
	cd $(PROJECT_BUILD_PATH)/bin && $(ANDROID_BUILD_TOOLS)/aapt add $(PROJECT_NAME).unsigned.apk classes.dex

# Create signed APK package using generated Key: bin/$(PROJECT_NAME).signed.apk
# "$(JAVA_HOME)/bin/jarsigner" -keystore $(PROJECT_BUILD_PATH)/$(PROJECT_NAME).keystore -storepass $(APP_KEYSTORE_PASS) -keypass $(APP_KEYSTORE_PASS) -signedjar $(PROJECT_BUILD_PATH)/bin/$(PROJECT_NAME).signed.apk $(PROJECT_BUILD_PATH)/bin/$(PROJECT_NAME).unsigned.apk $(PROJECT_NAME)Key -timestamp
sign_project_apk_package:
	@echo SIGNING APK
	"$(JAVA_HOME)/bin/jarsigner" -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
		-keystore "$(PROJECT_BUILD_PATH)/$(PROJECT_NAME).keystore" \
		-storepass $(APP_KEYSTORE_PASS) \
		-keypass $(APP_KEYSTORE_PASS) \
		"$(PROJECT_BUILD_PATH)/bin/$(PROJECT_NAME).unsigned.apk" \
		$(PROJECT_NAME)Key

	@echo v2 SIGNING
	"$(ANDROID_BUILD_TOOLS)/apksigner" sign \
		--ks "$(PROJECT_BUILD_PATH)/$(PROJECT_NAME).keystore" \
		--ks-pass pass:$(APP_KEYSTORE_PASS) \
		--key-pass pass:$(APP_KEYSTORE_PASS) \
		--out "$(PROJECT_BUILD_PATH)/bin/$(PROJECT_NAME).signed.apk" \
		-v \
		--v1-signing-enabled true \
		--v2-signing-enabled true \
		--min-sdk-version 32 \
		"$(PROJECT_BUILD_PATH)/bin/$(PROJECT_NAME).unsigned.apk"
	@echo SIGNING ENDED

# Create zip-aligned APK package: $(PROJECT_NAME).apk
zipalign_project_apk_package:
	$(ANDROID_BUILD_TOOLS)/zipalign -f 4 $(PROJECT_BUILD_PATH)/bin/$(PROJECT_NAME).signed.apk $(PROJECT_BUILD_PATH)/bin/$(PROJECT_NAME).aligned.apk

	@echo Re signing the apk
	"$(ANDROID_BUILD_TOOLS)/apksigner" sign \
		--ks "$(PROJECT_BUILD_PATH)/$(PROJECT_NAME).keystore" \
		--ks-pass pass:$(APP_KEYSTORE_PASS) \
		--key-pass pass:$(APP_KEYSTORE_PASS) \
		--out "$(PROJECT_NAME).apk" \
		-v \
		--v1-signing-enabled true \
		--v2-signing-enabled true \
		--min-sdk-version 32 \
		"$(PROJECT_BUILD_PATH)/bin/$(PROJECT_NAME).aligned.apk"

# Install $(PROJECT_NAME).apk to default emulator/device
# NOTE: Use -e (emulator) or -d (device) parameters if required
install:
	$(ANDROID_PLATFORM_TOOLS)/adb shell pm uninstall com.$(APP_COMPANY_NAME).$(APP_PRODUCT_NAME)
	$(ANDROID_PLATFORM_TOOLS)/adb install $(PROJECT_NAME).apk

start:
	$(ANDROID_PLATFORM_TOOLS)/adb shell am start -n com.$(APP_COMPANY_NAME).$(APP_PRODUCT_NAME)/com.$(APP_COMPANY_NAME).$(APP_PRODUCT_NAME).NativeLoader

# Monitorize output log coming from device, only raylib tag
logcat:
	$(ANDROID_PLATFORM_TOOLS)/adb logcat -c
	$(ANDROID_PLATFORM_TOOLS)/adb logcat raylib:V *:S

#$(ANDROID_PLATFORM_TOOLS)/adb logcat *:W

# Clean everything
clean:
	del $(PROJECT_BUILD_PATH)\* /f /s /q
	rmdir $(PROJECT_BUILD_PATH) /s /q
	@echo Cleaning done

.PHONY: all clean
